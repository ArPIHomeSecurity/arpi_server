
upstream webapplication_server {
    server unix:/run/argus/argus_server.sock fail_timeout=0;
}

map "$http_origin" $cors {
  default '';
  "~^https?://arpi\.local$" "$http_origin";
  "~^https?://.*\.arpi\.local$" "$http_origin";
  "~^https?://localhost(:[0-9]+)$" "$http_origin";
}

server {
    listen 443 ssl default_server;
    listen [::]:443 ssl default_server ipv6only=on;
    server_name argus;

    include snippets/ssl.conf;

    add_header Strict-Transport-Security max-age=15768000;

    # REST API
    location /api/ {
      proxy_pass http://webapplication_server;
      proxy_redirect off;

      proxy_set_header Host $http_host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      
      if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' "$cors" always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' '*' always;
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain charset=UTF-8';
        add_header 'Content-Length' 0;
        return 204;
      }
    }

    # Socket IO
    location /socket.io/ {
      proxy_pass http://localhost:8081;
      proxy_redirect off;
      proxy_buffering off;

      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
    }

    # Angular
    location / {
      root /home/argus/webapplication/;

      location ~ ^(assets/|.js|.css) {
        gzip on;
        gzip_types text/css application/javascript;
      }

      location ~* ^/(hu|it)/ {
        try_files $uri /$1/index.html; 
      }

      try_files $uri /en/$uri /en/index.html;
    }
}

# redirects from HTTP to HTTPS
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;
    return 301 https://$host$request_uri;
}
