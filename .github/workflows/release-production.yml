# Release Production Workflow
# This workflow automates the release process for the production build which is
# used in the live environment on the raspberry pi.
# The workflow will bump the version, and create a new release with the build artifacts.
name: Release Production

on:
  push:
    branches:
      - 'dev_*'  # Triggers on any branch starting with 'dev_'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - pre-release
      pre_release:
        description: 'Pre-release identifier (optional, e.g., "beta", "rc1")'
        required: false
        type: string
      release_notes:
        description: "Release notes / What's Changed (optional)"
        required: false
        type: string

jobs:
  release:
    name: Release Production
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Set input defaults for auto-triggered builds 🎯
        id: set_inputs
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "version_type=pre-release" >> $GITHUB_OUTPUT
            echo "pre_release=RC" >> $GITHUB_OUTPUT
            echo "release_notes=Development build" >> $GITHUB_OUTPUT
          else
            echo "version_type=${{ inputs.version_type }}" >> $GITHUB_OUTPUT
            echo "pre_release=${{ inputs.pre_release }}" >> $GITHUB_OUTPUT
            echo "release_notes=${{ inputs.release_notes }}" >> $GITHUB_OUTPUT
          fi

      - name: Checkout repository 🛎️
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0


      - name: Cache APT packages 📦
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: apt-cache-${{ runner.os }}
          restore-keys: |
            apt-cache-${{ runner.os }}-

      - name: Cache Python packages 📦
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-cache-${{ runner.os }}-${{ hashFiles('Pipfile.lock') }}
          restore-keys: |
            pip-cache-${{ runner.os }}-


      - name: Setup Python 🐍
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Configure Git 🔧
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Install dependencies 📦
        run: |
          pip install pipenv
          pipenv install --categories=dev-packages,simulator

      - name: Bump version 🏷️
        run: |
          if [ "${{ steps.set_inputs.outputs.version_type }}" = "pre-release" ]; then
            python scripts/bump_version.py -p "${{ steps.set_inputs.outputs.pre_release }}" -v
          else
            python scripts/bump_version.py -t ${{ steps.set_inputs.outputs.version_type }} -v
          fi

      - name: Get new version 📋
        id: get_version
        run: |
          VERSION=$(grep -o 'v[0-9]\+\.[0-9]\+\.[0-9]\+[^" ]*' src/server/version.py | head -1)
          VERSION_SIMPLE=$(echo "$VERSION" | sed 's/:.*//')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "simple_version=$VERSION_SIMPLE" >> $GITHUB_OUTPUT
          echo "New version: $VERSION"
          echo "Simple version: $VERSION_SIMPLE"

      - name: Commit version changes 💾
        run: |
          git add src/server/version.py
          git commit -m "GitHub Actions: bump version to $(echo '${{ steps.get_version.outputs.version }}' | sed 's/:.*//')"

      - name: Create Git tag 🏷️
        run: |
            git tag "$(echo '${{ steps.get_version.outputs.simple_version }}')" -m "Release version $(echo '${{ steps.get_version.outputs.version }}')"

      # no testing for now
      # - name: Run tests 🧪
      #   run: |
      #     # pipenv run pytest
      
      - name: Build and package server 🏗️
        run: |
          ./create_package.sh

      - name: Push changes and tags 🚀
        run: |
          git push origin
          git push origin --tags

      - name: Create GitHub Release 📦
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.simple_version }}
          name: Release ${{ steps.get_version.outputs.simple_version }}
          draft: false
          prerelease: ${{ steps.set_inputs.outputs.version_type == 'pre-release' }}
          generate_release_notes: true
          files: |
            arpi-server-${{ steps.get_version.outputs.simple_version }}.tar.gz
          body: |
            ## What's Changed

            ${{ steps.set_inputs.outputs.release_notes || 'This release includes the latest changes from the main branch.' }}

            ### Build Information
            - **Version**: ${{ steps.get_version.outputs.version }}
            - **Branch**: ${{ github.ref_name }}
            - **Build Date**: ${{ github.run_started_at }}
            - **Commit**: ${{ github.sha }}
            - **Workflow Run**: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
